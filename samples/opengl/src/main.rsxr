include "rsxrio", "rsxrmath" : *;
include "rsxrgl", "rsxrglfw" : *;

int createProgram(string vertexShaderSource, string fragmentShaderSource) {
    int vertexShader = glCreateShader(GL_VERTEX_SHADER);

    glShaderSource(vertexShader, 1, vertexShaderSource, 0);
    glCompileShader(vertexShader);
 
    int compileStatusVertex;
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &compileStatusVertex);
 
    if (!compileStatusVertex) {
        printf("vertex error\n");
        glDeleteShader(vertexShader);
        return 0;
    }

    int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);

    glShaderSource(fragmentShader, 1, fragmentShaderSource, 0);
    glCompileShader(fragmentShader);
 
    int compileStatusFragment;
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &compileStatusFragment);

    if (!compileStatusFragment) {
        printf("fragment error\n");
        glDeleteShader(fragmentShader);
        return 0;
    }

    int program = glCreateProgram();

    if (program == 0) {
        printf("program error\n");
        return 0;
    }
 
    glAttachShader(program, vertexShader);
    glAttachShader(program, fragmentShader);
    glLinkProgram(program);
 
    int linkStatus;
    glGetProgramiv(program, GL_LINK_STATUS, &linkStatus);
 
    if (!linkStatus) {
        printf("linking error\n");
        glDetachShader(program, vertexShader);
        glDetachShader(program, fragmentShader);
        glDeleteProgram(program);
        return 0;
    } return program;
}

bool initWindow() {
    glfwInit();
    glfwCreateWindow(1200, 600, "RSX-R");
    glfwMakeContextCurrent();
    glfwSwapInterval(1);
    return true;
}

int main() {
    initWindow();
    printf("OpenGL Version: %s\n", glGetString(GL_VERSION));

    glClearColor(0.1f, 0.1f, 0.4f, 1.0f);

    float[] vertices = {
        -0.7f, -0.7f, 0.0f, 1.0f, 0.0f, 0.0f,
         0.7f, -0.7f, 0.0f, 0.0f, 1.0f, 0.0f,
         0.0f,  0.7f, 0.0f, 0.0f, 0.0f, 1.0f
    };

    int[] indices = {
        0, 1, 2
    };

    string vertexShaderSource = "#version 460\n\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 color;\n\nout vec3 fragColor;\n\nvoid main() {\n    fragColor = color;\n    gl_Position = vec4(position, 1.0f);\n}";
    string fragmentShaderSource = "#version 460\n\nin vec3 fragColor;\n\nvoid main() {\n    gl_FragColor = vec4(fragColor, 1.0f);\n}";

    int program = createProgram(vertexShaderSource, fragmentShaderSource);

    int vao, vbo, ibo;
    glGenVertexArrays(1, &vao);
    glBindVertexArray(vao);

    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, 18 * 4, vertices, GL_STATIC_DRAW);

    glGenBuffers(1, &ibo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 3 * 4, indices, GL_STATIC_DRAW);

    glUseProgram(program);
    glVertexAttribPointer(0, 3, GL_FLOAT, false, 6 * 4, 0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, false, 6 * 4, 3 * 4);
    glEnableVertexAttribArray(1);
    glUseProgram(0);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    while (!glfwWindowShouldClose()) {
        glfwPollEvents();
        glClear(GL_COLOR_BUFFER_BIT);
        glUseProgram(program);
        glBindVertexArray(vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
        glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
        glBindVertexArray(0);
        glUseProgram(0);
        glfwSwapBuffers();
        int error = glGetError();
        if (error != 0) printf("glGetError(): %d\n", error);
    }

    glDeleteVertexArrays(1, &vao);
    glDeleteBuffers(1, &vbo);
    glDeleteBuffers(1, &ibo);
    glDeleteProgram(program);
    glfwDestroyWindow();
    glfwTerminate();
    return 0;
}